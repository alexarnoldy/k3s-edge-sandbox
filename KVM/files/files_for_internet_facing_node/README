* Create a VM in EC2 with an EIP and a FQDN in Route 53
* Set ssh port to 2244 and `GatewayPorts clientspecified` in /etc/ssh/sshd_config 
** Restart sshd.service
* Need to populate the EC2 SSH private key file on this host before running the scripts from here
* I.e. export EC2_SSH_KEY_LOCATION=/home/sles/k3s-edge-sandbox/state/site-1/site-1.id_rsa

* Set these variables, then use ssh to run the scripts on each node.

export FRONT_URL= 
export FRONT_END_IP= 
export SERVICE_NAME= 
export BACK_END_IP= 
export APP_SERVER_IP= 
export EC2_SSH_KEY_NAME= 
export EC2_SSH_KEY_LOCATION=
export SSH_USER=
export RANCHER_BOOTSTRAP_PW= 

ssh ${SSH_USER}@${BACK_END_IP} 'bash -s' << EOF
echo "[Unit]
Description=Maintain an SSH tunnel for ${SERVICE_NAME} access to lab
[Service]
Restart=always
ExecStart=/bin/bash /usr/local/bin/${SERVICE_NAME}-tunnel.sh
[Install]
WantedBy=multi-user.target" > /tmp/${SERVICE_NAME}-tunnel.service
EOF

ssh ${SSH_USER}@${BACK_END_IP} << EOF
mkdir -p .ssh
EOF
scp ${EC2_SSH_KEY_LOCATION} ${SSH_USER}@${BACK_END_IP}:.ssh/${EC2_SSH_KEY_NAME}
ssh ${SSH_USER}@${BACK_END_IP} chmod 400 .ssh/${EC2_SSH_KEY_NAME}

##########################################################################
##########################################################################
## Need to ssh from the back end server to the EC2 instance to remove the script in the root authorized_hosts as well as accept the EC2 key, again ssh'ing as the root user to the EC2 root user
##I.e.:

# SSH from this host to the back-end ssh tunnel server, and set these variables:
ssh ${SSH_USER}@${BACK_END_IP} 
export FRONT_URL=
export EC2_SSH_KEY_NAME=
# SSH from the back-end server to the front-end server and remove the script in the root authorized_hosts file:
####ssh -p 2244 -i .ssh/${EC2_SSH_KEY_NAME} ec2-user@${FRONT_URL} 
####sudo -i
####<< Edit the ~/.ssh/authorized_keys file, i.e. vim ~/.ssh/authorized_keys >>
####exit; exit
sudo ssh -p 2244 -i .ssh/${EC2_SSH_KEY_NAME} ec2-user@${FRONT_URL} << EOF
sudo cp /home/ec2-user/.ssh/authorized_keys /root/.ssh/authorized_keys
EOF

# Again from the back-end server to the front-end server, this time as root (to accept the ssh identity key)
sudo ssh -p 2244 -i .ssh/${EC2_SSH_KEY_NAME} root@${FRONT_URL} << EOF
exit
EOF

# Shell session should now be back on this host
##########################################################################
##########################################################################

## Set up the SSH tunnel service on the back-end server
ssh ${SSH_USER}@${BACK_END_IP} 'bash -s' << EOF
echo "#!/bin/bash
## Need to set ${SERVICE_NAME} ${APP_SERVER_IP} ${EC2_SSH_KEY_NAME} ${FRONT_END_IP} before running
while :
do nohup ssh -p 2244 -R 0.0.0.0:42422:${APP_SERVER_IP}:22 -R 0.0.0.0:80:${APP_SERVER_IP}:80 -R 0.0.0.0:443:${APP_SERVER_IP}:443 -N -i /home/${SSH_USER}/.ssh/${EC2_SSH_KEY_NAME} root@${FRONT_END_IP}
sleep 10
done" > /tmp/${SERVICE_NAME}-tunnel.sh
EOF

ssh ${SSH_USER}@${BACK_END_IP} <<EOF
sudo mv /tmp/${SERVICE_NAME}-tunnel.service /etc/systemd/system/
sudo mv /tmp/${SERVICE_NAME}-tunnel.sh /usr/local/bin/
sudo systemctl enable --now ${SERVICE_NAME}-tunnel.service
EOF

#################
## To install docker on the app server: 
#################
ssh ${SSH_USER}@${APP_SERVER_IP} << EOF
sudo zypper -n in docker
sudo systemctl enable --now docker.service
sudo usermod -aG docker ${SSH_USER}
EOF
ssh ${SSH_USER}@${APP_SERVER_IP} docker ps -a


#################
## To validate port 80 is passing through from the front-end server
#################
ssh ${SSH_USER}@${APP_SERVER_IP} << EOF
docker run -it --rm -d -p 80:80 --name nginx nginx
EOF

## Test from the Internet with a browser or curl:
clear
curl http://${APP_SERVER_IP}
sleep 5
#echo ""; echo ""
clear
curl http://${FRONT_URL}

## When ready, remove nginx:
ssh ${SSH_USER}@${APP_SERVER_IP} << EOF
docker stop nginx
docker ps -a
EOF


## To install Rancher server as the application:
# Set JUST ONE of the following to set the Rancher version:
RANCHER_VERSION="latest"
RANCHER_VERSION="stable"
RANCHER_VERSION="v2.6.2"

################
#### Set the following ONLY to use public TLS certificates (skip for self-signed or Let's Encrypt certs):
PUB_CERT_DIR="/home/opensuse/certs/susealliances.com"
PUB_CERT_FQPN="${PUB_CERT_DIR}/fullchain.pem"
PUB_CERT="-v ${PUB_CERT_FQPN}:/etc/rancher/ssl/cert.pem"
PUB_KEY_FQPN="${PUB_CERT_DIR}/privkey.pem"
PUB_KEY="-v ${PUB_KEY_FQPN}:/etc/rancher/ssl/key.pem"
CERTS_SWITCH="--no-cacerts"
LOCAL_CERT_TARBALL="/home/sles/certs/susealliances.com.tls.tar"
#### Need to scp a tarball of the public directory (remember to use -tvfh to follow links) to the App server:
ssh ${SSH_USER}@${APP_SERVER_IP} << EOF
mkdir -p $(dirname ${PUB_CERT_DIR})
EOF
scp ${LOCAL_CERT_TARBALL} ${SSH_USER}@${APP_SERVER_IP}:$(dirname ${PUB_CERT_DIR})
ssh ${SSH_USER}@${APP_SERVER_IP} << EOF
tar xvf $(dirname ${PUB_CERT_DIR})/$(basename ${LOCAL_CERT_TARBALL}) -C $(dirname ${PUB_CERT_DIR})
EOF
################

################
#### Set the following ONLY to use Let's Encrypt TLS certificates (skip for self-signed or public certs):
CERTS_SWITCH="--acme-domain ${FRONT_URL}"
################


## Run the following to perform the Rancher server installation
ssh ${SSH_USER}@${APP_SERVER_IP} << EOF
docker run \
	--detach \
	--restart=unless-stopped \
	--publish 80:80 --publish 443:443 \
	--privileged \
        ${PUB_CERT} \
        ${PUB_KEY} \
  --name rancher \
  -e CATTLE_BOOTSTRAP_PASSWORD=${RANCHER_BOOTSTRAP_PW} \
  rancher/rancher:${RANCHER_VERSION} ${CERTS_SWITCH} 
EOF



